#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ API
"""

import requests
import json
import sys

def add_test_data(base_url):
    """–î–æ–¥–∞—î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ REST API"""
    
    base_url = base_url.rstrip('/')
    
    print("üöÄ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–æ API...")
    print(f"URL: {base_url}\n")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    users = [
        {"Name": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ", "email": "ivan@example.com", "phone": "+380501234567"},
        {"Name": "–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ", "email": "maria@example.com", "phone": "+380502345678"},
        {"Name": "–û–ª–µ–∫—Å—ñ–π –®–µ–≤—á–µ–Ω–∫–æ", "email": "oleksiy@example.com", "phone": "+380503456789"},
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = [
        {"CategoryName": "–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞", "Description": "–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó —Ç–∞ –≥–∞–¥–∂–µ—Ç–∏"},
        {"CategoryName": "–ú–µ–±–ª—ñ", "Description": "–î–æ–º–∞—à–Ω—ñ —Ç–∞ –æ—Ñ—ñ—Å–Ω—ñ –º–µ–±–ª—ñ"},
        {"CategoryName": "–û–¥—è–≥", "Description": "–ß–æ–ª–æ–≤—ñ—á–∏–π —Ç–∞ –∂—ñ–Ω–æ—á–∏–π –æ–¥—è–≥"},
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
    properties = [
        {"PropertyName": "iPhone 15", "Price": 45000.00, "Description": "–ù–æ–≤–∏–π iPhone 15", "OwnerID": 1},
        {"PropertyName": "MacBook Pro", "Price": 85000.00, "Description": "MacBook Pro M3", "OwnerID": 1},
        {"PropertyName": "–°—Ç—ñ–ª –æ—Ñ—ñ—Å–Ω–∏–π", "Price": 3500.00, "Description": "–ï—Ä–≥–æ–Ω–æ–º—ñ—á–Ω–∏–π –æ—Ñ—ñ—Å–Ω–∏–π —Å—Ç—ñ–ª", "OwnerID": 2},
        {"PropertyName": "–ö—É—Ä—Ç–∫–∞ –∑–∏–º–æ–≤–∞", "Price": 2500.00, "Description": "–¢–µ–ø–ª–∞ –∑–∏–º–æ–≤–∞ –∫—É—Ä—Ç–∫–∞", "OwnerID": 3},
    ]
    
    print("1Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    for user in users:
        try:
            response = requests.post(f"{base_url}/api/users", json=user, timeout=10)
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ –î–æ–¥–∞–Ω–æ: {user['Name']}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ {user['Name']}: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print("\n2Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...")
    for category in categories:
        try:
            response = requests.post(f"{base_url}/api/categories", json=category, timeout=10)
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ –î–æ–¥–∞–Ω–æ: {category['CategoryName']}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ {category['CategoryName']}: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print("\n3Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π...")
    for prop in properties:
        try:
            response = requests.post(f"{base_url}/api/properties", json=prop, timeout=10)
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ –î–æ–¥–∞–Ω–æ: {prop['PropertyName']}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ {prop['PropertyName']}: {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    print("\n" + "="*50)
    print("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Swagger:")
    print(f"   {base_url}/api/docs/")
    print("="*50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö...")
    endpoints = [
        ("/api/users", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
        ("/api/categories", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"),
        ("/api/properties", "–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ"),
    ]
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            if response.status_code == 200:
                data = response.json()
                count = len(data) if isinstance(data, list) else "?"
                print(f"   ‚úÖ {name}: {count} –∑–∞–ø–∏—Å—ñ–≤")
            else:
                print(f"   ‚ö†Ô∏è  {name}: –ø–æ–º–∏–ª–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {name}: {e}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python3 add_test_data.py <URL>")
        print("")
        print("–ü—Ä–∏–∫–ª–∞–¥–∏:")
        print("  python3 add_test_data.py http://localhost:5000")
        print("  python3 add_test_data.py https://your-app.azurecontainerapps.io")
        sys.exit(1)
    
    url = sys.argv[1]
    add_test_data(url)

